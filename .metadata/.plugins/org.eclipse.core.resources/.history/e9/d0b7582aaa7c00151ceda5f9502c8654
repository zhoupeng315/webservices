package org.itat.stax;

import java.io.IOException;
import java.io.InputStream;

import javax.xml.namespace.QName;
import javax.xml.stream.EventFilter;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.events.XMLEvent;

import org.junit.Test;

public class TestStax {

    @Test
    public void test01() {
	XMLInputFactory factory = XMLInputFactory.newInstance();
	InputStream is = null;

	try {
	    is = TestStax.class.getClassLoader()
		    .getResourceAsStream("books.xml");
	    XMLStreamReader reader = factory.createXMLStreamReader(is);
	    while (reader.hasNext()) {
		System.out.println(reader.next());
		int type = reader.next();
		// 判断节点类型是否开始或者文本节点，之后根据情况处理 基于 光标方式
		if (type == XMLStreamConstants.START_DOCUMENT) {
		    System.out.println(reader.getName());
		} else if (type == XMLStreamConstants.CHARACTERS) {
		    System.out.println(reader.getText().trim());
		} else if (type == XMLStreamConstants.END_ELEMENT) {
		    System.out.println("/" + reader.getName());
		}
	    }
	} catch (XMLStreamException e) {
	    e.printStackTrace();
	} finally {
	    try {
		if (is != null)
		    is.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}

    }

    @Test
    public void test02() {
	XMLInputFactory factory = XMLInputFactory.newInstance();
	InputStream is = null;

	try {
	    is = TestStax.class.getClassLoader()
		    .getResourceAsStream("books.xml");
	    XMLStreamReader reader = factory.createXMLStreamReader(is);
	    while (reader.hasNext()) {
		int type = reader.next();
		if (type == XMLStreamConstants.START_ELEMENT) {
		    String name = reader.getName().toString();
		    if (name.equals("book")) {
			System.out.println(reader.getAttributeName(0) + ":"
				+ reader.getAttributeValue(0));
		    }
		}
	    }
	} catch (XMLStreamException e) {
	    e.printStackTrace();
	} finally {
	    try {
		if (is != null)
		    is.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}
    }

    @Test
    public void test03() {
	XMLInputFactory factory = XMLInputFactory.newInstance();
	InputStream is = null;

	try {
	    is = TestStax.class.getClassLoader()
		    .getResourceAsStream("books.xml");
	    XMLStreamReader reader = factory.createXMLStreamReader(is);
	    while (reader.hasNext()) {
		int type = reader.next();
		if (type == XMLStreamConstants.START_ELEMENT) {
		    String name = reader.getName().toString();
		    if (name.equals("title")) {
			System.out.print(reader.getElementText() + ":");
		    }
		    if (name.equals("price")) {
			System.out.print(reader.getElementText() + "\n");
		    }
		}
	    }
	} catch (XMLStreamException e) {
	    e.printStackTrace();
	} finally {
	    try {
		if (is != null)
		    is.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}
    }

    @Test
    public void test04() {
	XMLInputFactory factory = XMLInputFactory.newInstance();
	InputStream is = null;

	try {
	    is = TestStax.class.getClassLoader()
		    .getResourceAsStream("books.xml");
	    // 基于迭代模型的擦搜作坊式
	    XMLEventReader reader = factory.createXMLEventReader(is);

	    while (reader.hasNext()) {
		// 通过XMLEvent来获取是否是某种节点类型
		XMLEvent event = reader.nextEvent();
		if (event.isStartElement()) {
		    // 通过event.asXXX转换节点
		    String name = event.asStartElement().getName().toString();
		    if (name.equals("title")) {
			System.out.print(reader.getElementText() + ":");
		    }
		    if (name.equals("price")) {
			System.out.print(reader.getElementText() + "\n");
		    }
		}
	    }
	} catch (XMLStreamException e) {
	    e.printStackTrace();
	} finally {
	    try {
		if (is != null)
		    is.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}
    }

    @Test
    public void test05() {
	XMLInputFactory factory = XMLInputFactory.newInstance();
	InputStream is = null;

	try {
	    is = TestStax.class.getClassLoader()
		    .getResourceAsStream("books.xml");
	    // 基于迭代模型的擦搜作坊式
	    XMLEventReader reader = factory.createFilteredReader(
		    factory.createXMLEventReader(is), new EventFilter() {

			@Override
			public boolean accept(XMLEvent event) {
			    if(event.isStartElement()) return true;
			    return false;
			}
		    });
	    int num =0;
	    while (reader.hasNext()) {
		// 通过XMLEvent来获取是否是某种节点类型
		XMLEvent event = reader.nextEvent();
		if (event.isStartElement()) {
		    // 通过event.asXXX转换节点
		    String name = event.asStartElement().getName().toString();
		    if (name.equals("title")) {
			System.out.print(reader.getElementText() + ":");
		    }
		    if (name.equals("price")) {
			System.out.print(reader.getElementText() + "\n");
		    }
		}
		num++;
	    }
	    System.out.println(num);
	} catch (XMLStreamException e) {
	    e.printStackTrace();
	} finally {
	    try {
		if (is != null)
		    is.close();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	}
    }
}
